#!/bin/bash

# Written by Evan Rittenhouse as of Apr 11 2015
# Generates C++ projects as per UMBC coding standards
# - Generates makefile
# - Generates Driver.cpp or Driver.c based on filetype
# - Generates header or source files
# - Adds rules to makefile upon creation of source files

# Do initial prompts
echo
echo "Welcome to Evan's coding standard autogenerator!"
echo "Are you making a .cpp, .c, or a .h file?"

# Prompt for filetype
select filetype in cpp h c
do
	# Only accept .cpp and .h as valid file extensions
	if test "$filetype" == "cpp" -o "$filetype" == "h" -o "$filetype" == "c"
	then
		break
	else
		echo "Not a valid response. "
		echo "Are you making a .cpp, .c, or a .h file?"
	fi
done

# Get file name
read -p "What is the name of your $filetype file? " filename

# Add header to file
echo "/*" > $filename"."$filetype
echo " * File: "$filename"."$filetype >> $filename"."$filetype


# Attempt to read project metadata and populate variables if possible
if test ! -e .cppbuildmeta
then
	# Determine other specifications
	echo
	echo "Is this a project or a homework?"

	select workType in Project Homework
	do
		if test "$workType" == "Project" -o "$workType" == "Homework"
		then
			break
		else
			echo "Invalid input."
			echo "Is this a project or a homework?"
		fi
	done

	read -p "What is the "`echo $workType | tr [A-Z] [a-z]`" number? " workNbr
	echo "What class is this for?"
	read -p "Don't add a section number yet! CMSC " classNbr
	read -p "What is the section number? " secNbr

	echo "$workType $workNbr $classNbr $secNbr" > .cppbuildmeta
else
	metadata=(`less .cppbuildmeta`);
	
	workType=${metadata[0]}
	workNbr=${metadata[1]}
	classNbr=${metadata[2]}
	secNbr=${metadata[3]}
fi

# Determine fall or spring semester based on date
if test `date +%m` == "0[8-9]" -o `date +%m` == "1[0-2]"
then
	semester="Fall"
else
	semester="Spring"
fi

echo " * Project: CMSC "$classNbr" "$workType" "$workNbr", "$semester" "`date +%Y` >> $filename"."$filetype

# Add the user's actual name through getent
echo " * Author: "`getent passwd $USER | cut -d ":" -f 5` | sed -r "s/(\w+ \w+).*/\1/" >> $filename"."$filetype
echo " * Date: "`date +%D` >> $filename"."$filetype
echo " * Section: "$secNbr >> $filename"."$filetype
echo " * E-mail: "$USER"@umbc.edu" >> $filename"."$filetype

# Add a blank line before the description
echo " *" >> $filename"."$filetype

# Read in description
description=""

echo
echo "Enter a description for the file. Type \"END\" to stop adding description."

# Continuously get description until user writes "END"
while test 1 -eq 1
do
	read description

	if test "$description" == "END"
	then
		break
	else
		echo " * "$description >> $filename"."$filetype
	fi
done

# Finish main description
echo " */" >> $filename"."$filetype

echo "" >> $filename"."$filetype
echo

# Define the Driver.* filetype based on file extension
if test "$filetype" == "c" -o $filetype == "cpp"
then
	runtype=$filetype
fi


# Create makefile if it doesn't exist and we're making a c or cpp file
if test ! -e "makefile" -a  ! -z "$runtype"
then
	echo "Makefile created"
	echo "# Generated by Evan's Coding Standard Autogenerator" >> makefile
	echo "# Created "`date +'%Y/%m/%d %H:%M:%S'` >> makefile
	echo "all: Driver.o" >> makefile

	# Different build rules based on filetype
	if test "$runtype" == "cpp"
	then
		echo "	g++ -ansi -Wall -o Driver.out *.o" >> makefile
	else
		echo "	gcc -ansi -Wall -o Driver.out *.o" >> makefile
	fi

	echo "" >> makefile
	echo "Driver.o: Driver.$runtype" >> makefile

	# More differing build rules
	if test "$runtype" == cpp
	then
		echo "	g++ -ansi -Wall -c Driver.$runtype" >> makefile
	else
		echo "	gcc -ansi -Wall -c Driver.$runtype" >> makefile
	fi

	echo "" >> makefile
	echo ".PHONY: clean" >> makefile
	echo "clean:" >> makefile
	echo "	rm -rf *.o" >> makefile
	echo "	rm -rf Driver.out" >> makefile
	echo "	rm -rf .*.gch" >> makefile
	echo "	rm -rf results.txt" >> makefile
	echo "" >> makefile
	echo ".PHONY: run" >> makefile
	echo "run: all" >> makefile
	echo "	./Driver.out" >> makefile
    echo "" >> makefile
	echo ".PHONY: todo" >> makefile
	echo "todo:" >> makefile
	echo "	grep -e \".*\btodo\|TODO\b.*\" *.cpp *.c *.h" >> makefile
	echo "" >> makefile

	# Create Driver.cpp if it doesn't exist
	if test ! -e "Driver.cpp" -o ! -e "Driver.c"
	then
		echo "Driver.$runtype created"

		# Add same format header to Driver class.
		echo "/*" > "Driver."$runtype
		echo " * File: Driver.$runtype" >> "Driver."$runtype
		echo " * Project: CMSC "$classNbr" "$workType" "$workNbr", "$semester" "`date +%Y` >> "Driver."$runtype
		echo " * Author: "`getent passwd $USER | cut -d ":" -f 5` >> "Driver."$runtype
		echo " * Date: "`date +%D` >> "Driver."$runtype
		echo " * Section: "$secNbr >> "Driver."$runtype
		echo " * E-mail: "$USER"@umbc.edu" >> "Driver."$runtype
		echo " *" >> "Driver."$runtype
		echo " * Runs the project." >> "Driver."$runtype
		echo " */" >> "Driver."$runtype

		# Add include and skeleton main function
		echo "" >> "Driver."$runtype

		# Add different includes based on C or CPP code
		if test "$runtype" == "cpp"
		then
			echo "#include <iostream>" >> "Driver."$runtype
			echo "using namespace std;" >> "Driver."$runtype
		else
			echo "#include <stdio.h>" >> "Driver."$runtype
		fi

		echo "" >> "Driver."$runtype
		echo "void printGreeting()" >> "Driver."$runtype
		echo "{" >> "Driver."$runtype
		echo "" >> "Driver."$runtype
		echo "}" >> "Driver."$runtype
		echo "" >> "Driver."$runtype
		echo "int main(int argv, char** argc)" >> "Driver."$runtype
		echo "{" >> "Driver."$runtype
		echo "	" >> "Driver."$runtype
		echo "}" >> "Driver."$runtype
		echo "" >> "Driver."$runtype
	fi
fi


# Add in remainder for header file
if test "$filetype" == "h"
then
	# Add ifndefs
	echo "#ifndef "`echo $filename | tr [a-z] [A-Z]`"_H" >> $filename".h"
	echo "#define "`echo $filename | tr [a-z] [A-Z]`"_H" >> $filename".h"

	echo "" >> $filename".h"

	# Build class
	echo "class "$filename >> $filename".h"
	echo "{" >> $filename".h"
	echo "private:" >> $filename".h"
	echo "	" >> $filename".h"
	echo "public:" >> $filename".h"
	echo "	" >> $filename".h"
	echo "};" >> $filename".h"

	# Finish ifndef
	echo "" >> $filename".h"
	echo "#endif // "`echo $filename | tr [a-z] [A-Z]`"_H" >> $filename".h"
else # Add a #include for the .h file in .cpp and add a rule to the makefile


	echo "#include \""$filename".h\"" >> $filename"."$runtype
	echo "" >> $filename"."$runtype

	# Add rule to make all
	mv makefile oldmakefile
	less oldmakefile | sed -r "s/(all:.*)/\1 $filename.o/" > makefile
	rm oldmakefile

	# Add make rule
	echo $filename".o: "$filename"."$runtype" "$filename".h" >> makefile

	# Different make rule based on different filetype
	if test "$runtype" == "cpp"
	then
		echo "	g++ -ansi -Wall -c "$filename".cpp" >> makefile
	else
		echo "	gcc -ansi -Wall -c "$filename".c" >> makefile
	fi

	echo "" >> makefile
fi

echo "Your file "$filename"."$filetype" was created successfully."
echo
