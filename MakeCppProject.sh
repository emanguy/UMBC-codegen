#!/bin/bash

# Written by Evan Rittenhouse as of Apr 11 2015
# Generates C++ projects as per UMBC coding standards
# - Generates makefile
# - Generates Driver.cpp
# - Generates header or source files
# - Adds rules to makefile upon creation of source files

# Do initial prompts
echo
echo "Welcome to Evan's coding standard autogenerator!"
echo "Are you making a .cpp or a .h file?"

# Prompt for filetype
select filetype in cpp h
do
	# Only accept .cpp and .h as valid file extensions
	if test "$filetype" == "cpp" -o "$filetype" == "h"
	then
		break
	else
		echo "Not a valid response. "
		echo "Are you making a .cpp or a .h file?"
	fi
done

# Get file name
read -p "What is the name of your $filetype file? " filename

# Add header to file
echo "/*" > $filename"."$filetype
echo " * File: "$filename"."$filetype >> $filename"."$filetype

# Determine other specifications
echo
echo "Is this a project or a homework?"

select workType in Project Homework
do
	if test "$workType" == "Project" -o "$workType" == "Homework"
	then
		break
	else
		echo "Invalid input."
		echo "Is this a project or a homework?"
	fi
done

read -p "What is the "`echo $workType | tr [A-Z] [a-z]`" number? " workNbr
echo "What class is this for?"
read -p "Don't add a section number yet! CMSC " classNbr
read -p "What is the section number? " secNbr

# Determine fall or spring semester based on date
if test `date +%m` == "0[8-9]" -o `date +%m` == "1[0-2]"
then
	semester="Fall"
else
	semester="Spring"
fi

echo " * Project: CMSC "$classNbr" "$workType" "$workNbr", "$semester" "`date +%Y` >> $filename"."$filetype

# Add the user's actual name through getent
echo " * Author: "`getent passwd $USER | cut -d ":" -f 5` >> $filename"."$filetype
echo " * Date: "`date +%D` >> $filename"."$filetype
echo " * Section: "$secNbr >> $filename"."$filetype
echo " * E-mail: "$USER"@umbc.edu" >> $filename"."$filetype

# Add a blank line before the description
echo " *" >> $filename"."$filetype

# Read in description
description=""

echo
echo "Enter a description for the file. Type \"END\" to stop adding description."

# Continuously get description until user writes "END"
while test 1 -eq 1
do
	read description

	if test "$description" == "END"
	then
		break
	else
		echo " * "$description >> $filename"."$filetype
	fi
done

# Finish main description
echo " */" >> $filename"."$filetype

echo "" >> $filename"."$filetype
echo

# Create makefile if it doesn't exist
if test ! -e "makefile"
then
	echo "Makefile created"
	echo "# Generated by Evan's Coding Standard Autogenerator" >> makefile
	echo "# Created "`date +'%Y/%m/%d %H:%M:%S'` >> makefile
	echo "all: Driver.o" >> makefile
	echo "	g++ -ansi -Wall -o Driver.out *.cpp" >> makefile
	echo "" >> makefile
	echo "Driver.o: Driver.cpp" >> makefile
	echo "	g++ -ansi -Wall -c Driver.cpp" >> makefile
	echo "" >> makefile
	echo ".PHONY: clean" >> makefile
	echo "clean:" >> makefile
	echo "	rm -rf *.o" >> makefile
	echo "	rm -rf Driver.out" >> makefile
	echo "	rm -rf .*.gch" >> makefile
	echo "	rm -rf results.txt" >> makefile
	echo "" >> makefile
	echo ".PHONY: run" >> makefile
	echo "run: all" >> makefile
	echo "	./Driver.out" >> makefile
	echo ".PHONY: todo" >> makefile
	echo "todo:" >> makefile
	echo "	grep -e \".*\btodo\|TODO\b.*\" *.cpp *.h" >> makefile
	echo "" >> makefile
fi

# Create Driver.cpp if it doesn't exist
if test ! -e "Driver.cpp"
then
	echo "Driver.cpp created"

	# Add same format header to Driver class.
	echo "/*" > Driver.cpp
	echo " * File: Driver.cpp" >> Driver.cpp
	echo " * Project: CMSC "$classNbr" "$workType" "$workNbr", "$semester" "`date +%Y` >> Driver.cpp
	echo " * Author: "`getent passwd $USER | cut -d ":" -f 5` >> Driver.cpp
	echo " * Date: "`date +%D` >> Driver.cpp
	echo " * Section: "$secNbr >> Driver.cpp
	echo " * E-mail: "$USER"@umbc.edu" >> Driver.cpp
	echo " *" >> Driver.cpp
	echo " * Runs the project." >> Driver.cpp
	echo " */" >> Driver.cpp

	# Add include and skeleton main function
	echo "" >> Driver.cpp
	echo "#include <iostream>" >> Driver.cpp
	echo "" >> Driver.cpp
	echo "int main(int argv, char** argc)" >> Driver.cpp
	echo "{" >> Driver.cpp
	echo "	" >> Driver.cpp
	echo "}" >> Driver.cpp
	echo "" >> Driver.cpp
fi

# Add in remainder for header file
if test "$filetype" == "h"
then
	# Add ifndefs
	echo "#ifndef "`echo $filename | tr [a-z] [A-Z]`"_H" >> $filename".h"
	echo "#define "`echo $filename | tr [a-z] [A-Z]`"_H" >> $filename".h"

	echo "" >> $filename".h"

	# Build class
	echo "class "$filename >> $filename".h"
	echo "{" >> $filename".h"
	echo "private:" >> $filename".h"
	echo "	" >> $filename".h"
	echo "public:" >> $filename".h"
	echo "	" >> $filename".h"
	echo "};" >> $filename".h"

	# Finish ifndef
	echo "" >> $filename".h"
	echo "#endif // "`echo $filename | tr [a-z] [A-Z]`"_H" >> $filename".h"
else # Add a #include for the .h file in .cpp and add a rule to the makefile


	echo "#include \""$filename".h\"" >> $filename".cpp"
	echo "" >> $filename".cpp"

	# Add rule to make all
	mv makefile oldmakefile
	less oldmakefile | sed -r "s/(all:.*)/\1 $filename.o/" > makefile
	rm oldmakefile

	# Add make rule
	echo $filename".o: "$filename".cpp "$filename".h" >> makefile
	echo "	g++ -ansi -Wall -c "$filename".cpp" >> makefile
	echo "" >> makefile
fi

echo "Your file "$filename"."$filetype" was created successfully."
echo
